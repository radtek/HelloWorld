#ifndef XML_OPERATOR_H
#define XML_OPERATOR_H

#include <string>
#include <map>
#include <stdio.h>
#include "tinyxml.h"

using std::string;
using std::map;
using std::pair;

namespace GDASK
{
	//-------------------------------------------------------------------------------------
	///@功能：实现TinyXml常用操作的封装
	//-------------------------------------------------------------------------------------
	class CXmlOperator
	{
	public:
		//-------------------------------------------------------------------------------------
		///@描述：CXmlOperator			--- 初始化构造函数,生成文档对象
		//-------------------------------------------------------------------------------------
		CXmlOperator();

		//-------------------------------------------------------------------------------------
		///@描述：~CXmlOperator			--- 析构函数
		//-------------------------------------------------------------------------------------
		virtual ~CXmlOperator();

		//-------------------------------------------------------------------------------------
		///@描述：getXmlPath			--- 返回加载文件时的文件路径
		///
		///@返回值：文件目录路径
		//-------------------------------------------------------------------------------------
		const char* getXmlPath() const;

		//-------------------------------------------------------------------------------------
		///@描述：getXmlName			--- 返回加载文件时的文件名
		///
		///@返回值：文件名称
		//-------------------------------------------------------------------------------------
		const char* getXmlName() const;

		//-------------------------------------------------------------------------------------
		///@描述：loadFile				--- 解析加载文件
		///
		///@参数：szFileName			--- 文档名
		///@参数：szFilePath			--- 文档目录路径
		///@参数：szError				--- 错误信息
		///
		///@返回值：成功加载返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool loadFile(const string &szFileName, const string &szFilePath, string &szError);

		//-------------------------------------------------------------------------------------
		///@描述：saveFile				--- 保存对象到文件
		///
		///@参数：szFileName			--- 文档名
		///@参数：szFilePath			--- 文档目录路径
		///@参数：szError				--- 错误信息
		///
		///@返回值：成功保存返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool saveFile(const string &szFileName, const string &szFilePath, string &szError) const;

		//-------------------------------------------------------------------------------------
		///@描述：loadStr				--- 加载XML字符串到对象
		///
		///@参数：szStrXml				--- 保存对象的XML字符串
		///@参数：szError				--- 错误信息
		///
		///@返回值：成功加载返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool loadStr(const string &szStrXml, string &szError);

		//-------------------------------------------------------------------------------------
		///@描述：saveStr				--- 保存对象到XML字符串
		///
		///@参数：szStrXml				--- 保存对象的XML字符串
		///@参数：szError				--- 错误信息
		///
		///@返回值：成功保存返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool saveStr(string &szStrXml, string &szError) const;

		//-------------------------------------------------------------------------------------
		///@描述：getElemName			--- 获取节点名
		///
		///@返回值：根节点元素的指针,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		string getElemName(TiXmlElement* pCurElem) const;

		//-------------------------------------------------------------------------------------
		///@描述：getRootElem			--- 获取根节点元素
		///
		///@返回值：根节点元素的指针,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlElement* getRootElem() const;

		//-------------------------------------------------------------------------------------
		///@描述：getPreElem			--- 获取指定节点元素上一个（指名）同级节点元素
		///								--- （名字缺省为取之上第一个同级节点元素）
		///
		///@参数：pCurElem				--- 指定节点元素
		///@参数：pcName				--- 节点元素名称
		///
		///@返回值：返回上一个（指名）同级节点元素指针,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlElement* getPreElem(TiXmlElement* pCurElem, const char* pcName = NULL) const;

		//-------------------------------------------------------------------------------------
		///@描述：getNextElem			--- 获取指定节点元素下一(指名)同级节点元素
		///								--- (名字缺省为取之后第一个同级节点元素)
		///
		///@参数：pPreElem				--- 当前节点元素
		///@参数：pcName				--- 节点元素名称
		///
		///@返回值：返回下一(指名)同级节点元素指针,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlElement* getNextElem(TiXmlElement* pPreElem, const char* pcName = NULL) const;

		//-------------------------------------------------------------------------------------
		///@描述：getFirstChildElem			--- 获取指定节点元素第一个（指名）子节点元素
		///								--- （名字缺省为取第一个子节点元素）
		///
		///@参数：pParElem				--- 当前节点元素
		///@参数：pcName				--- 要获取节点元素的名称
		///
		///@返回值：返回第一个（指名）子节点元素指针,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlElement* getFirstChildElem(TiXmlElement* pParElem, const char* pcName = NULL) const;

		//-------------------------------------------------------------------------------------
		///@描述：getFirstChildElem		--- 获取指定节点元素最后一个（指名）子节点元素
		///								--- （名字缺省为取最后一个子节点元素）
		///
		///@参数：pParElem				--- 当前节点元素
		///@参数：pcName				--- 要获取节点元素的名称
		///
		///@返回值：返回最后一个（指名）子节点元素指针,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlElement* getLastChildElem(TiXmlElement* pParElem, const char* pcName = NULL) const;

		//-------------------------------------------------------------------------------------
		///@描述：getPreNode			--- 获取指定节点上一个（指名）同级节点
		///								--- （名字缺省为取之上第一个同级节点）
		///
		///@参数：pCurNode				--- 指定节点
		///@参数：pcName				--- 节点名称
		///
		///@返回值：返回上一个（指名）同级节点指针,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlNode* getPreNode(TiXmlNode* pCurNode, const char* pcName = NULL) const;

		//-------------------------------------------------------------------------------------
		///@描述：getNextNode			--- 获取指定节点下一个（指名）同级节点
		///								--- （名字缺省为取之后第一个同级节点）
		///
		///@参数：pCurNode				--- 指定节点
		///@参数：pcName				--- 节点名称
		///
		///@返回值：返回下一个（指名）同级节点指针，不存在则返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlNode* getNextNode(TiXmlNode* pCurNode, const char* pcName = NULL) const;

		//-------------------------------------------------------------------------------------
		///@描述：getFirstChildNode		--- 获取指定节点的第一个（指名）子节点
		///								--- （名字缺省为取第一个子节点）
		///
		///@参数：pParNode				--- 指定节点
		///@参数：pcName				--- 节点名称
		///
		///@返回值：返回第一个（指名）子节点指针,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlNode* getFirstChildNode(TiXmlNode* pParNode, const char* pcName = NULL) const;

		//-------------------------------------------------------------------------------------
		///@描述：getLastChildNode		--- 获取指定节点的最后一个（指名）子节点
		///								--- （名字缺省为取最后一个子节点）
		///
		///@参数：pParNode				--- 指定节点
		///@参数：pcName				--- 节点名称
		///
		///@返回值：返回最后一个（指名）子节点指针,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlNode* getLastChildNode(TiXmlNode* pParNode, const char* pcName = NULL) const;

		//-------------------------------------------------------------------------------------
		///@描述：getParent				--- 获取指定节点的父节点
		///
		///@参数：pCurNode				--- 指定节点
		///
		///@返回值：返回父节点指针,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlNode* getParent(TiXmlNode* pCurNode) const;

		//-------------------------------------------------------------------------------------
		///@描述：printDoc				--- 打印输出XML文档内容
		//-------------------------------------------------------------------------------------
		void printDoc() const;

		//-------------------------------------------------------------------------------------
		///@描述：getElemText			--- 获取指定节点元素包含的文本值
		///
		///@参数：pElem					--- 指定节点元素
		///
		///@返回值：元素包含的文本值,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		const char* getElemText(TiXmlElement* pElem) const;

		//-------------------------------------------------------------------------------------
		///@描述：getElemAttriValue		--- 获取指定节点元素的（指名）属性的属性值
		///
		///@参数：pElem					--- 指定节点元素
		///@参数：pcName				--- 属性名称
		///
		///@返回值：属性值,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		string getElemAttriValue(const TiXmlElement* pElem, const char* pcName) const;

		//-------------------------------------------------------------------------------------
		///@描述：getFirstAttribute		--- 获取指定节点元素的第一个属性对象
		///
		///@参数：pElem					--- 指定节点元素
		///
		///@返回值：第一个属性对象指针,不存在则返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlAttribute* getFirstAttribute(TiXmlElement* pElem) const;

		//-------------------------------------------------------------------------------------
		///@描述：getLastAttribute		--- 获取指定节点元素的最后一个属性对象
		///
		///@参数：pElem					--- 指定节点元素
		///
		///@返回值：最后一个属性对象指针，不存在则返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlAttribute* getLastAttribute(TiXmlElement* pElem) const;

		//-------------------------------------------------------------------------------------
		///@描述：addRootElement		--- 添加根节点
		///
		///@参数：pcRootName			--- 根节点名称
		///
		///@返回值：根节点指针,失败返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlElement* addRootElement(const char* pcRootName);

		//-------------------------------------------------------------------------------------
		///@描述：addChildElement		--- 在指定的节点元素最后添加子节点元素(节点文本缺省)
		///
		///@参数：pParElem				--- 指定的节点元素
		///@参数：pcChilName			--- 子节点元素名
		///@参数：pcChilText			--- 子节点元素包含的文本
		///
		///@返回值：子节点的指针，失败返回NULL
		//-------------------------------------------------------------------------------------
		TiXmlElement* addChildElement(TiXmlElement* pParElem, const char* pcChilName, const char* pcChilText = NULL);

		//-------------------------------------------------------------------------------------
		///@描述：addDeclaration		--- 增加XML文档声明
		///
		///@参数：pcVersion				--- 版本
		///@参数：pcEnCoding			--- 字符编码方式
		///@参数：pcStandalone			--- xml文件是独立的还是依赖与外部dtd文件
		///
		///@返回值：成功添加返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool addDeclaration(const char* pcVersion = "1.0", const char* pcEnCoding = "gb2312", const char* pcStandalone = "Yes");

		//-------------------------------------------------------------------------------------
		///@描述：addComment			--- 增加XML文档注释
		///
		///@参数：pElem					--- 指定节点元素
		///@参数：pcComment				--- 注释
		///
		///@返回值：成功添加返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool addComment(TiXmlNode* pElem, const char* pcComment);

		//-------------------------------------------------------------------------------------
		///@描述：addElemText			--- 为指定节点元素添加文本
		///
		///@参数：pElem					--- 指定节点元素
		///@参数：pcText				--- 文本
		///
		///@返回值：成功添加返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool addElemText(TiXmlElement* pElem, const char* pcText);

		//-------------------------------------------------------------------------------------
		///@描述：addElemAttribute		--- 为指定节点元素添加 属性 和 属性值
		///
		///@参数：pElem					--- 指定节点元素
		///@参数：pcAttriName			--- 属性名称
		///@参数：pcAttriValue			--- 属性值
		///
		///@返回值：成功添加返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool addElemAttribute(TiXmlElement* pElem, const char* pcAttriName, const char* pcAttriValue);

		//-------------------------------------------------------------------------------------
		///@描述：insertBeforeChild		--- 在指定的子节点位置前插入节点
		///
		///@参数：pFather				--- 父节点
		///@参数：pBefThis				--- 指定的子节点
		///@参数：txAddThis				--- 要插入的节点
		///
		///@返回值：返回插入的节点的指针
		//-------------------------------------------------------------------------------------
		TiXmlNode* insertBeforeChild(TiXmlNode* pFather, TiXmlNode* pBefThis, const TiXmlNode& txAddThis);

		//-------------------------------------------------------------------------------------
		///@描述：insertAfterChild		--- 在指定的子节点位置后插入节点
		///
		///@参数：pFather				--- 父节点
		///@参数：pAftThis				--- 指定的子节点
		///@参数：txAddThis				--- 要插入的节点
		///
		///@返回值：返回插入的节点的指针
		//-------------------------------------------------------------------------------------
		TiXmlNode* insertAfterChild(TiXmlNode* pFather, TiXmlNode* pAftThis, const TiXmlNode& txAddThis);

		//-------------------------------------------------------------------------------------
		///@描述：ReplaceChild			--- 替换指定的子节点
		///
		///@参数：pFather				--- 父节点
		///@参数：pAftThis				--- 指定的子节点
		///@参数：txAddThis				--- 要替换成的节点
		///
		///@返回值：返回替换后的节点的指针
		//-------------------------------------------------------------------------------------
		TiXmlNode* replaceChild(TiXmlNode* pFather, TiXmlNode* pReplaceThis, const TiXmlNode& txWithThis);

		//-------------------------------------------------------------------------------------
		///@描述：RemoveChild			--- 删除指定的子节点
		///
		///@参数：pFathNode				--- 指定的父节点
		///@参数：removeThis			--- 指定的子节点
		///
		///@返回值：成功返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool removeChild(TiXmlNode* pFathNode, TiXmlNode* pRemoveThis);

		//-------------------------------------------------------------------------------------
		///@描述：removeAttribute		--- 删除指定节点元素的指定属性
		///
		///@参数：pElem					--- 指定的节点元素
		///@参数：pcName				--- 属性名
		///
		///@返回值：成功返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool removeAttribute(TiXmlElement* pElem, const char* pcName);

		//-------------------------------------------------------------------------------------
		///@描述：clear					--- 删除指定节点元素的所有子节点
		///
		///@参数：pElem					--- 指定的节点元素
		///
		///@返回值：成功返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool clear(TiXmlElement* pElem);

		//-------------------------------------------------------------------------------------
		///@描述：ClearDocument			--- 清空文档对象
		///
		///@参数：
		///
		///@返回值：
		//-------------------------------------------------------------------------------------
		void ClearDocument();

		//-------------------------------------------------------------------------------------
		///@描述：modifyElemText		--- 修改指定节点元素的文本
		///
		///@参数：pElem					--- 指定的节点元素
		///@参数：pcNewValue			--- 文本
		///
		///@返回值：成功返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool modifyElemText(TiXmlElement* pElem, const char* pcNewValue);

		//-------------------------------------------------------------------------------------
		///@描述：modifyElemAttri		--- 修改指定节点元素的（指名）属性的属性值
		///
		///@参数：pElem					--- 指定的节点元素
		///@参数：pcAttriName			--- 属性名
		///@参数：pcAttriValue			--- 属性值
		///
		///@返回值：成功返回true，否则返回false
		//-------------------------------------------------------------------------------------
		bool modifyElemAttri(TiXmlElement* pElem, const char* pcAttriName, const char* pcAttriValue);

		//-------------------------------------------------------------------------------------
		///@描述：countChildNode		--- 直接返回节点包含的下一级子节点的个数
		///
		///@参数：pNode					--- 指定要计算包含子节点个数的节点
		///@参数：szNodeName			--- 指定节点名
		///
		///@返回值：返回该节点的（指定名字）子节点个数（默认不指定子节点名，返回所有子节点个数）
		//-------------------------------------------------------------------------------------
		int countChildNode(TiXmlNode* pNode, string szNodeName = "") const;

		//-------------------------------------------------------------------------------------
		///@描述：countChildElem		--- 直接返回节点包含的下一级子元素的个数
		///
		///@参数：pElem					--- 指定要计算包含子元素个数的节点元素
		///@参数：szElemName			--- 指定节点元素名
		///
		///@返回值：返回该元素的（指定名字）子节点元素个数
		///（默认不指定子节点元素名，返回所有子节点元素个数）
		//-------------------------------------------------------------------------------------
		int countChildElem(TiXmlElement* pElem, string szElemName = "") const;

		//-------------------------------------------------------------------------------------
		///@描述：getChildByCount		--- 直接根据节点指针与子节点的序号得到子节点的指针
		///
		///@参数：pNode					--- 父节点
		///@参数：iOrder				--- 要返回的子节点的序号
		///
		///@返回值：返回该节点的指定序号的子节点的指针
		//-------------------------------------------------------------------------------------
		TiXmlNode* getChildByCount(TiXmlNode* pNode, const int iOrder) const;

		//-------------------------------------------------------------------------------------
		///@描述：getChildByName		--- 直接根据节点指针和子节点的名称得到子节点的指针
		///
		///@参数：pNode					--- 父节点
		///@参数：pcName				--- 要返回的子节点的名称
		///
		///@返回值：返回该节点的指定名称的子节点的指针
		//-------------------------------------------------------------------------------------
		TiXmlNode* getChildByName(TiXmlNode* pNode, const char* pcName) const;

		//-------------------------------------------------------------------------------------
		///@描述：getAllAttribute		--- 根据节点指针一次取出所有的属性及属性值
		///
		///@参数：pElem					--- 指定要返回所有属性及属性值的节点
		///@参数：mapAttribute			--- 包含该节点所有属性和属性值的map容器
		///
		///@返回值：成功返回true，否则返回fail
		//-------------------------------------------------------------------------------------
		bool getAllAttribute(TiXmlElement* pElem, map<string, string> &mapAttribute) const;

		//-------------------------------------------------------------------------------------
		///@描述：getAllAttributeByChild	--- 以各子节点作为属性保存信息的情况，根据节点指针一次取出所有属性及属性值
		///
		///@参数：pElem						--- 父节点
		///@参数：mapAttribute				--- 包含该节点所有子节点名称与对应文本的map容器
		///
		///@返回值：成功返回true，否则返回fail
		//-------------------------------------------------------------------------------------
		bool getAllAttributeByChild(TiXmlElement* pElem, map<string, string> &mapAttribute) const;

		//-------------------------------------------------------------------------------------
		///@描述：getDoc					--- 获取文档对象
		///
		///@返回值：文档对象的指针
		//-------------------------------------------------------------------------------------
		TiXmlDocument* getDoc() const;

	private:
		string m_szFileName;
		string m_szFilePath;
		//-------------------------------------------------------------------------------------
		///@描述：文档对象
		//-------------------------------------------------------------------------------------
		TiXmlDocument* m_pXmlDoc;

	};
}

#endif
